//
plugins {
    id 'com.github.spotbugs' apply false
}


allprojects {
    group = 'com.platformlib'
    version = project.findProperty('build.version') ?: '1.0-SNAPSHOT'
    repositories {
        mavenCentral()
    }
}

def subprojectsWithoutSources = [
    'platformlib-process-dsl',
    'platformlib-process-bom'
]

configure(subprojects.findAll { !(it.name in subprojectsWithoutSources) }) {
    apply plugin: 'java-library'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'pmd'
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'
    apply plugin: 'signing'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    spotbugs {
        toolVersion = project['spotbugs.version']
    }

    spotbugsMain {
        reports {
            xml.enabled = true
            reportLevel = "high"
            html.enabled = false
        }
    }

    spotbugsTest {
        enabled = false
    }

    pmd {
        ignoreFailures = true
        toolVersion = project['pmd.version']
        sourceSets = [sourceSets.main]
        ruleSets = []
        ruleSetFiles = files(project.rootProject.file("codestyle/pmd-rules-configuration.xml"))
    }

    checkstyle {
        toolVersion = project['checkstyle.version']
        sourceSets = [project.sourceSets.main]
        configFile = project.rootProject.file("codestyle/checkstyle-java.xml")
    }

    jacoco {
        toolVersion = project['jacoco.version']
    }

    dependencies {
        testImplementation "ch.qos.logback:logback-classic:${project['logback.version']}"
        testImplementation enforcedPlatform("org.junit:junit-bom:${project.'junit-jupiter.version'}")
        testImplementation "org.junit.jupiter:junit-jupiter-engine"
        testImplementation "org.junit.jupiter:junit-jupiter-params"
        testImplementation group: 'org.assertj', name: 'assertj-core', version: project['assertj.version']
        testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: project['mockito.version']
    }

    jacocoTestReport {
        reports {
            html.enabled true
        }
        test {
            jacoco {
                includes = ["com.platformlib.process.*"]
            }
        }
    }

    test {
        useJUnitPlatform()
        systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
        finalizedBy jacocoTestReport
        systemProperties = [
            'junit.jupiter.execution.parallel.enabled': true
        ]
    }

    java {
        withJavadocJar()
        withSourcesJar()
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    compileJava {
        options.release = 8
    }

    apply plugin: 'maven-publish'

    signing {
        sign publishing.publications
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                pom {
                    name = 'platformlib-process'
                    description = 'Process management library'
                    url = 'https://github.com/platformlib/platformlib-process'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'vicspbsky'
                            name = 'Viktor Ivanov'
                            email = 'vicspbsky@gmail.com'
                        }
                    }
                    scm {
                        connection = 'https://github.com/platformlib/platformlib-process'
                        developerConnection = 'scm:https://github.com/platformlib/platformlib-process.git'
                        url = 'scm:https://github.com/platformlib/platformlib-process.git'
                    }

                }
            }
        }
        repositories {
            maven {
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                credentials {
                    username sonatypeUsername
                    password sonatypePassword
                }
            }
        }
    }
}
